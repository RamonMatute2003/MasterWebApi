// <auto-generated />
using System;
using MasterNet.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MasterNet.Persistence.Migrations
{
    [DbContext(typeof(MasterNetDbContext))]
    [Migration("20250621164413_MigracionInicial")]
    partial class MigracionInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("MasterNet.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbd15c36-7f5c-4669-bae5-eb995c1d3003"),
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            PublicationDate = new DateTime(2025, 6, 21, 16, 44, 12, 987, DateTimeKind.Utc).AddTicks(6526),
                            Title = "Rustic Rubber Pants"
                        },
                        new
                        {
                            Id = new Guid("eccf2eb4-1e47-4938-bdd9-e48f486f3b7e"),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            PublicationDate = new DateTime(2025, 6, 21, 16, 44, 12, 987, DateTimeKind.Utc).AddTicks(6553),
                            Title = "Handmade Fresh Chair"
                        },
                        new
                        {
                            Id = new Guid("8c7aa1db-63e4-4939-995f-314e9d0e103d"),
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            PublicationDate = new DateTime(2025, 6, 21, 16, 44, 12, 987, DateTimeKind.Utc).AddTicks(6568),
                            Title = "Incredible Concrete Computer"
                        },
                        new
                        {
                            Id = new Guid("b9a10894-3c72-4fd7-bccd-5fc79756ecd7"),
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            PublicationDate = new DateTime(2025, 6, 21, 16, 44, 12, 987, DateTimeKind.Utc).AddTicks(6582),
                            Title = "Practical Concrete Salad"
                        },
                        new
                        {
                            Id = new Guid("62888f55-78f3-4b06-9474-0fff99dfdf7a"),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            PublicationDate = new DateTime(2025, 6, 21, 16, 44, 12, 987, DateTimeKind.Utc).AddTicks(6596),
                            Title = "Handmade Wooden Pizza"
                        },
                        new
                        {
                            Id = new Guid("e61ce275-9dc4-4ad9-8930-161dbd027ac9"),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            PublicationDate = new DateTime(2025, 6, 21, 16, 44, 12, 987, DateTimeKind.Utc).AddTicks(6665),
                            Title = "Awesome Cotton Towels"
                        },
                        new
                        {
                            Id = new Guid("9b01b651-064c-4811-87ca-6542c2343699"),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            PublicationDate = new DateTime(2025, 6, 21, 16, 44, 12, 987, DateTimeKind.Utc).AddTicks(6679),
                            Title = "Gorgeous Frozen Gloves"
                        },
                        new
                        {
                            Id = new Guid("f8a678b8-a5ee-4e37-b79a-3b9435310dc5"),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            PublicationDate = new DateTime(2025, 6, 21, 16, 44, 12, 987, DateTimeKind.Utc).AddTicks(6690),
                            Title = "Licensed Soft Shoes"
                        },
                        new
                        {
                            Id = new Guid("bc1cc2da-08df-4b1f-883c-e43c2c0805aa"),
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            PublicationDate = new DateTime(2025, 6, 21, 16, 44, 12, 987, DateTimeKind.Utc).AddTicks(6699),
                            Title = "Rustic Rubber Bike"
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.CourseInstructor", b =>
                {
                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("courseInstructors", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.CoursePrice", b =>
                {
                    b.Property<Guid?>("PriceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("PriceId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("coursePrices", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Student")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("evaluations", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("instructors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33522ec1-c5ac-4891-b036-fe54e841cf49"),
                            Grade = "Investor Program Director",
                            LastName = "Schmitt",
                            Name = "Mario"
                        },
                        new
                        {
                            Id = new Guid("5f69b20a-3f42-4b67-a2ff-b14130039fe9"),
                            Grade = "Senior Paradigm Representative",
                            LastName = "Okuneva",
                            Name = "Kristin"
                        },
                        new
                        {
                            Id = new Guid("a9d4d6c8-833d-4062-abf0-57bc814415d2"),
                            Grade = "Internal Optimization Specialist",
                            LastName = "Parisian",
                            Name = "Pinkie"
                        },
                        new
                        {
                            Id = new Guid("801b2a76-a5ac-4559-893c-d7ade8bf3abd"),
                            Grade = "Product Usability Strategist",
                            LastName = "Stokes",
                            Name = "Tod"
                        },
                        new
                        {
                            Id = new Guid("5f2b7aa7-bd04-4968-aaa0-c348b45a911b"),
                            Grade = "Product Operations Orchestrator",
                            LastName = "Renner",
                            Name = "Waino"
                        },
                        new
                        {
                            Id = new Guid("5971a58d-0105-4a55-8ff1-ff5c5b7ad2cc"),
                            Grade = "Principal Identity Specialist",
                            LastName = "Kiehn",
                            Name = "Stephania"
                        },
                        new
                        {
                            Id = new Guid("d21e6f49-6915-4d1c-969e-b96b824640f2"),
                            Grade = "Human Implementation Supervisor",
                            LastName = "Bailey",
                            Name = "Marques"
                        },
                        new
                        {
                            Id = new Guid("086b6999-bc45-4301-a7ae-dbdac2fef302"),
                            Grade = "Dynamic Tactics Representative",
                            LastName = "Sawayn",
                            Name = "Mose"
                        },
                        new
                        {
                            Id = new Guid("fee2f4bd-eca5-4309-9492-b72d172da57d"),
                            Grade = "Human Creative Officer",
                            LastName = "Kertzmann",
                            Name = "Jennifer"
                        },
                        new
                        {
                            Id = new Guid("025b2317-daaf-457e-add9-103979300b61"),
                            Grade = "Dynamic Assurance Director",
                            LastName = "Schmitt",
                            Name = "Josie"
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("PromotionalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("439b36a5-0f53-4fd0-a894-bce4418bd3f1"),
                            CurrentPrice = 10.0m,
                            Name = "Precio Regular",
                            PromotionalPrice = 8.0m
                        });
                });

            modelBuilder.Entity("MasterNet.Persistence.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Career")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7be52fc3-4ff7-48b8-a7cd-679e75324720",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d298c85c-a5a1-4846-b323-2a8f3d055b08",
                            Name = "CLIENT",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "POLICES",
                            ClaimValue = "COURSE_READ",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "POLICES",
                            ClaimValue = "COURSE_UPDATE",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "POLICES",
                            ClaimValue = "COURSE_WRITE",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "POLICES",
                            ClaimValue = "COURSE_DELETE",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "POLICES",
                            ClaimValue = "INSTRUCTOR_CREATE",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "POLICES",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "POLICES",
                            ClaimValue = "INSTRUCTOR_UPDATE",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "POLICES",
                            ClaimValue = "COMMENT_READ",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "POLICES",
                            ClaimValue = "COMMENT_DELETE",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "POLICES",
                            ClaimValue = "COMMENT_CREATE",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "POLICES",
                            ClaimValue = "COURSE_READ",
                            RoleId = "d298c85c-a5a1-4846-b323-2a8f3d055b08"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "POLICES",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "POLICES",
                            ClaimValue = "COMMENT_READ",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "POLICES",
                            ClaimValue = "COMMENT_CREATE",
                            RoleId = "7be52fc3-4ff7-48b8-a7cd-679e75324720"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.CourseInstructor", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Domain.Instructor", "Instructor")
                        .WithMany("CoursesInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("MasterNet.Domain.CoursePrice", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("CoursePrices")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Domain.Price", "Price")
                        .WithMany("CoursePrices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("MasterNet.Domain.Evaluation", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("Evaluations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MasterNet.Domain.Photo", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("Photos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MasterNet.Domain.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CoursePrices");

                    b.Navigation("Evaluations");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("MasterNet.Domain.Instructor", b =>
                {
                    b.Navigation("CoursesInstructors");
                });

            modelBuilder.Entity("MasterNet.Domain.Price", b =>
                {
                    b.Navigation("CoursePrices");
                });
#pragma warning restore 612, 618
        }
    }
}
