// <auto-generated />
using System;
using MasterNet.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MasterNet.Persistence.Migrations
{
    [DbContext(typeof(MasterNetDbContext))]
    [Migration("20250108092230_MigrationsSecurity")]
    partial class MigrationsSecurity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("MasterNet.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("19388ded-e92e-40f5-b7ea-a3d4142ac15f"),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            PublicationDate = new DateTime(2025, 1, 8, 9, 22, 29, 670, DateTimeKind.Utc).AddTicks(2356),
                            Title = "Tasty Concrete Table"
                        },
                        new
                        {
                            Id = new Guid("aff45fd0-1824-49df-9120-1b046829e845"),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            PublicationDate = new DateTime(2025, 1, 8, 9, 22, 29, 670, DateTimeKind.Utc).AddTicks(2553),
                            Title = "Handcrafted Granite Cheese"
                        },
                        new
                        {
                            Id = new Guid("3222b9e6-412c-4ea6-86e4-a079dbd91b6f"),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            PublicationDate = new DateTime(2025, 1, 8, 9, 22, 29, 670, DateTimeKind.Utc).AddTicks(2564),
                            Title = "Ergonomic Concrete Pants"
                        },
                        new
                        {
                            Id = new Guid("a3aab660-c4e0-4a7c-a53a-6496ea48381e"),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            PublicationDate = new DateTime(2025, 1, 8, 9, 22, 29, 670, DateTimeKind.Utc).AddTicks(2603),
                            Title = "Unbranded Granite Chicken"
                        },
                        new
                        {
                            Id = new Guid("31a21aab-908d-4087-b896-2b5b7144ae81"),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            PublicationDate = new DateTime(2025, 1, 8, 9, 22, 29, 670, DateTimeKind.Utc).AddTicks(2612),
                            Title = "Unbranded Steel Soap"
                        },
                        new
                        {
                            Id = new Guid("90a22150-b541-453a-aa4d-04ca913d7a62"),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            PublicationDate = new DateTime(2025, 1, 8, 9, 22, 29, 670, DateTimeKind.Utc).AddTicks(2623),
                            Title = "Handcrafted Fresh Pizza"
                        },
                        new
                        {
                            Id = new Guid("e145ffd7-a5e6-44ec-857b-72d87d1aa14b"),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            PublicationDate = new DateTime(2025, 1, 8, 9, 22, 29, 670, DateTimeKind.Utc).AddTicks(2636),
                            Title = "Fantastic Wooden Sausages"
                        },
                        new
                        {
                            Id = new Guid("666df67b-cd32-49e5-8d9d-f4cafec7d917"),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            PublicationDate = new DateTime(2025, 1, 8, 9, 22, 29, 670, DateTimeKind.Utc).AddTicks(2646),
                            Title = "Incredible Granite Mouse"
                        },
                        new
                        {
                            Id = new Guid("094ec9f7-717b-4faa-9add-6dc9969767e2"),
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            PublicationDate = new DateTime(2025, 1, 8, 9, 22, 29, 670, DateTimeKind.Utc).AddTicks(2656),
                            Title = "Small Metal Shoes"
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.CourseInstructor", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("courseInstructors", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.CoursePrice", b =>
                {
                    b.Property<Guid>("PriceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("PriceId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("coursePrices", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Student")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("evaluations", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("instructors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb8afc3d-0636-4cfd-9e43-501e60305c29"),
                            Grade = "Global Assurance Director",
                            LastName = "Tillman",
                            Name = "Clyde"
                        },
                        new
                        {
                            Id = new Guid("418dbe8b-9954-4634-bfaa-a2d35e78affc"),
                            Grade = "Senior Security Associate",
                            LastName = "Stiedemann",
                            Name = "Percy"
                        },
                        new
                        {
                            Id = new Guid("0a72ed3c-321f-4f14-b27e-7aded4d89c67"),
                            Grade = "Direct Mobility Manager",
                            LastName = "Ernser",
                            Name = "Jamaal"
                        },
                        new
                        {
                            Id = new Guid("dea77a28-6631-4a6b-b811-9c9063ebfeb9"),
                            Grade = "Human Assurance Manager",
                            LastName = "O'Connell",
                            Name = "Justine"
                        },
                        new
                        {
                            Id = new Guid("5758dc76-0a36-4305-8791-4b729c74a2e4"),
                            Grade = "Global Markets Coordinator",
                            LastName = "Berge",
                            Name = "Chanelle"
                        },
                        new
                        {
                            Id = new Guid("4a5d5223-0497-4b1c-ab7a-96d7d5e79097"),
                            Grade = "Human Accounts Liaison",
                            LastName = "Haag",
                            Name = "Bernard"
                        },
                        new
                        {
                            Id = new Guid("980dd2c9-f7c0-4854-9473-9272fc1bb064"),
                            Grade = "Senior Data Orchestrator",
                            LastName = "Hermann",
                            Name = "Adam"
                        },
                        new
                        {
                            Id = new Guid("a505b4ba-c744-42a1-8f77-5cae59cdc682"),
                            Grade = "Chief Identity Architect",
                            LastName = "Kertzmann",
                            Name = "Sister"
                        },
                        new
                        {
                            Id = new Guid("203ac93a-a3cb-4851-aed3-558ce0e7f0e7"),
                            Grade = "Legacy Branding Developer",
                            LastName = "Simonis",
                            Name = "Abner"
                        },
                        new
                        {
                            Id = new Guid("d39325a6-68df-48f7-a1a1-aede66d00bfc"),
                            Grade = "Global Mobility Developer",
                            LastName = "Roberts",
                            Name = "Ariane"
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("PromotionalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9276886a-6b8d-4107-8849-fc5eca0221e8"),
                            CurrentPrice = 10.0m,
                            Name = "Precio Regular",
                            PromotionalPrice = 8.0m
                        });
                });

            modelBuilder.Entity("MasterNet.Persistence.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Career")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "90079424-840d-4bf2-a927-a10b9b91ccac",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b073edae-22a6-466c-9629-1873560c678b",
                            Name = "CLIENT",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "POLICES",
                            ClaimValue = "COURSE_READ",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "POLICES",
                            ClaimValue = "COURSE_UPDATE",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "POLICES",
                            ClaimValue = "COURSE_WRITE",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "POLICES",
                            ClaimValue = "COURSE_DELETE",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "POLICES",
                            ClaimValue = "INSTRUCTOR_CREATE",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "POLICES",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "POLICES",
                            ClaimValue = "INSTRUCTOR_UPDATE",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "POLICES",
                            ClaimValue = "COMMENT_READ",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "POLICES",
                            ClaimValue = "COMMENT_DELETE",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "POLICES",
                            ClaimValue = "COMMENT_CREATE",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "POLICES",
                            ClaimValue = "COURSE_READ",
                            RoleId = "b073edae-22a6-466c-9629-1873560c678b"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "POLICES",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "POLICES",
                            ClaimValue = "COMMENT_READ",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "POLICES",
                            ClaimValue = "COMMENT_CREATE",
                            RoleId = "90079424-840d-4bf2-a927-a10b9b91ccac"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.CourseInstructor", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Domain.Instructor", "Instructor")
                        .WithMany("CoursesInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("MasterNet.Domain.CoursePrice", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("CoursePrices")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Domain.Price", "Price")
                        .WithMany("CoursePrices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("MasterNet.Domain.Evaluation", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("Evaluations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MasterNet.Domain.Photo", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("Photos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MasterNet.Domain.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CoursePrices");

                    b.Navigation("Evaluations");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("MasterNet.Domain.Instructor", b =>
                {
                    b.Navigation("CoursesInstructors");
                });

            modelBuilder.Entity("MasterNet.Domain.Price", b =>
                {
                    b.Navigation("CoursePrices");
                });
#pragma warning restore 612, 618
        }
    }
}
